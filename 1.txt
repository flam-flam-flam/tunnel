https://gopm.io/download

https://gitee.com/snail/anytunnel

https://play.golang.org/

mysqldump -uroot -padmin --database anytunnel_system > anytunnel_system.sql  

# pwd
/home/gaochuang/proxy/src
# ll
drwxr-xr-x. 12 root root      188 Aug 14 17:44 anytunnel
-rwxr-xr-x.  1 root root 17438989 Aug 14 18:30 at-api
-rw-r--r--.  1 root root 19277488 Aug 13 08:46 dep.zip
drwxr-xr-x. 18 root root      253 Aug 12 19:12 github.com
drwxr-xr-x.  3 root root       15 Aug 12 17:28 golang.org
drwxr-xr-x.  4 root root       35 Aug 12 19:13 gopkg.in
export GOPATH=/home/gaochuang/proxy
export GOROOT=/usr/lib/golang
在proxy目录下创建src、pkg、in目录，把依赖放在src目录下

# go build anytunnel/at-api
# go build anytunnel/at-common


https://127.0.0.1:37081/cs/auth


at-client.exe --token=y6yNbPG8zirV83dt85o99HBSIjOHOcqy
./at-cluster
./at-server --token=SQ5UjZqd05RXC3jZbvwusJD5mBM7nmEv

./at-server --token=nUvqVCUn4bjmy5lVN9iqUlspPo5FpWnQ

at-admin.exe
at-api.exe
at-web.exe


upx 编译：   make all //之后在src目录下有upx.out文件，可以直接使用
upx --ultra-brute 文件
upx --best 文件
upx -9 -k 文件
GOOS=linux GOARCH=mipsle GOMIPS=softfloat go build -ldflags -w -ldflags -s .


gcc -lssl -lcrypto at_client.c cJSON.c  -o at_client -g     (-g 调试使用)

./at_client 10.100.93.52 37601


gdb ./at_client
b line
r 10.100.93.52 37601
p 变量
p item->child->next->priv
q

controlCommandHandler fd:3
Server msg1 bytes: 4 mresp.header: 131 
Server msg1 bytes: 131 mresp.body: {"Type":5,"Data":{"MsgType":5,"TunnelID":11,"ConnectinID":3576249143519914,"LocalHost":"127.0.0.1","LocalPort":22223,"Protocol":1}} 
item->valuestring :{
        "MsgType":      5,
        "TunnelID":     11,
        "ConnectinID":  3576249143519914,
        "LocalHost":    "127.0.0.1",
        "LocalPort":    22223,
        "Protocol":     1
}

https://blog.csdn.net/clirus/article/details/50151427  mips
https://blog.csdn.net/yannanxiu/article/details/79791146  mips
https://github.com/paldier/ac1200gu/tree/master/tools 交叉编译环境

https://github.com/Jaywalker/libadb 


SSL_set_verify(ssl,SSL_VERIFY_NONE,NULL);  ssl验证问题


box 的datatunnelchannel连接不上，需要注释cluster中dataConnCallback函数的go func(){ 那一行和结束的那一行

https://blog.csdn.net/codemanship/article/details/43152909 端口映射

https://blog.csdn.net/tanzui/article/details/80038115 adb只监听127.0.0.1 问题
https://blog.csdn.net/xgbing/article/details/52096880 adb源码分析

iptables -t nat -A PREROUTING -p tcp -m tcp --dport 5038 -j DNAT --to-destination 127.0.0.1:5037
iptables -t nat -A INPUT -p tcp -m state --state NEW -m tcp --dport 5038 -j ACCEPT

iptables -t nat -A PREROUTING -p tcp -m tcp --dport 5555 -j DNAT --to-destination 192.168.42.129:5555

https://start.spring.io/

route add 192.168.43.0 mask 255.255.255.0 -p 192.168.1.1
route add 10.100.93.0 mask 255.255.255.0 -p 192.168.1.1
route del 10.100.93.0 mask 255.255.255.0 -p 192.168.1.1

route add -net 10.100.93.0 netmask 255.255.255.0 gw 10.1.18.2
route del -net 10.100.93.0 netmask 255.255.255.0

【shell】
#-h 表示判断一个文件存在并且是一个软链接
#-n 判断变量的值，是否为空,跟-z很相似
#-x 文件存在且可执行
#> 重定向
#2>&1 的意思就是将标准错误重定向到标准输出
#-a 　 　　　　　 与 
#-o　　　　　　　 或 
#!　　　　　　　　非

#$0	当前脚本的文件名
#$n	传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。
#$#	传递给脚本或函数的参数个数。
#$*	传递给脚本或函数的所有参数。
#$@	传递给脚本或函数的所有参数。被双引号(" ")包含时，与 $* 稍有不同，下面将会讲到。
#$?	上个命令的退出状态，或函数的返回值。
